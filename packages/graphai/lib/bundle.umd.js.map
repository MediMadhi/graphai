{"version":3,"file":"bundle.umd.js","sources":["../src/type.ts","../src/utils/utils.ts","../src/utils/nodeUtils.ts","../src/transaction_log.ts","../src/utils/prop_function.ts","../src/utils/data_source.ts","../src/utils/result.ts","../src/node.ts","../src/validators/common.ts","../src/validators/graph_data_validator.ts","../src/validator.ts","../src/validators/nodeValidator.ts","../src/validators/static_node_validator.ts","../src/validators/computed_node_validator.ts","../src/validators/agent_validator.ts","../src/validators/relation_validator.ts","../src/task_manager.ts","../src/graphai.ts"],"sourcesContent":["import type { TransactionLog } from \"./transaction_log\";\nimport type { TaskManager } from \"./task_manager\";\nimport type { GraphAI } from \"./graphai\";\n\nexport enum NodeState {\n  Waiting = \"waiting\",\n  Queued = \"queued\",\n  Executing = \"executing\",\n  ExecutingServer = \"executing-server\",\n  Failed = \"failed\",\n  TimedOut = \"timed-out\",\n  Abort = \"abort\",\n  Completed = \"completed\",\n  Injected = \"injected\",\n  Skipped = \"skipped\",\n}\n\nexport type DefaultResultData = Record<string, any> | string | number | boolean | Array<DefaultResultData>;\nexport type DefaultInputData = Record<string, any>;\nexport type DefaultConfigData = Record<string, any>;\nexport type ResultData<ResultType = DefaultResultData> = ResultType | undefined;\nexport type ResultDataDictionary<ResultType = DefaultResultData> = Record<string, ResultData<ResultType>>;\n\nexport type ConfigData<ConfigType = DefaultConfigData> = ConfigType;\nexport type ConfigDataDictionary<ConfigType = DefaultConfigData> = Record<string, ConfigType>;\nexport type DefaultParamsType = Record<string, any>;\nexport type NodeDataParams<ParamsType = DefaultParamsType> = ParamsType; // Agent-specific parameters\n\nexport type PassThrough = Record<string, any>;\n\nexport type DataSource = {\n  nodeId?: string;\n  value?: any;\n  propIds?: string[];\n};\n\ntype ConsoleAttribute = boolean | string | Record<string, any>;\nexport type ConsoleElement = boolean | { before?: ConsoleAttribute; after?: ConsoleAttribute };\n\nexport type StaticNodeData = {\n  value?: ResultData; // initial value for static node.\n  update?: string; // nodeId (+.propId) to get value after a loop\n  isResult?: boolean;\n  console?: ConsoleElement;\n};\nexport type AgentAnonymousFunction = (...params: any[]) => unknown;\n\nexport type AgentFilterParams = Record<string, any>;\n\nexport type GraphDataLoaderOption = { fileName: string; option?: any };\n\nexport type ComputedNodeData = {\n  agent: string | AgentAnonymousFunction;\n  inputs?: Record<string, any>;\n  output?: Record<string, any>;\n  anyInput?: boolean; // any input makes this node ready\n  params?: NodeDataParams;\n  filterParams?: AgentFilterParams; // agent filter\n  retry?: number;\n  timeout?: number; // msec\n  if?: string; // conditional execution\n  unless?: string; // conditional execution\n  defaultValue?: ResultData;\n  graph?: GraphData | string;\n  graphLoader?: GraphDataLoaderOption;\n  isResult?: boolean;\n  priority?: number; // The default is 0.\n  passThrough?: PassThrough; // data that pass trough to result\n  console?: ConsoleElement;\n};\n\nexport type NodeData = StaticNodeData | ComputedNodeData;\n\nexport type LoopData = {\n  count?: number;\n  while?: string | boolean;\n};\n\nexport type GraphData = {\n  version?: number; // major version, 0.1, 0.2, ...\n  nodes: Record<string, NodeData>;\n  concurrency?: number;\n  loop?: LoopData;\n  verbose?: boolean;\n  retry?: number;\n  metadata?: any; // Stores information about GraphData. GraphAI itself is not used this data.\n};\n\nexport type GraphDataLoader = (loaderOption: GraphDataLoaderOption) => GraphData;\n\nexport type GraphOptions = {\n  agentFilters?: AgentFilterInfo[] | undefined;\n  taskManager?: TaskManager | undefined;\n  bypassAgentIds?: string[] | undefined;\n  config?: ConfigDataDictionary;\n  graphLoader?: GraphDataLoader;\n};\n\nexport type CacheTypes = \"pureAgent\" | \"impureAgent\";\n\nexport type AgentFunctionContextDebugInfo = {\n  verbose: boolean;\n  nodeId: string;\n  state: string;\n  subGraphs: Map<string, GraphAI>;\n  retry: number;\n  agentId?: string;\n  version?: number;\n  isResult?: boolean;\n};\n\nexport type AgentFunctionContext<ParamsType = DefaultParamsType, NamedInputDataType = DefaultInputData, ConfigType = DefaultConfigData> = {\n  params: NodeDataParams<ParamsType>;\n  inputSchema?: any;\n  namedInputs: NamedInputDataType;\n  debugInfo: AgentFunctionContextDebugInfo;\n  forNestedGraph?: {\n    graphData?: GraphData; // nested graph\n    agents: AgentFunctionInfoDictionary; // for nested graph\n    graphOptions: GraphOptions;\n    onLogCallback?: (log: TransactionLog, isUpdate: boolean) => void;\n    callbacks?: CallbackFunction[];\n  };\n  cacheType?: CacheTypes;\n  filterParams: AgentFilterParams; // agent filter\n  log?: TransactionLog[];\n  config?: ConfigType;\n};\n\nexport type AgentFunction<\n  ParamsType = DefaultParamsType,\n  ResultType = DefaultResultData,\n  NamedInputDataType = DefaultInputData,\n  ConfigType = DefaultConfigData,\n> = (context: AgentFunctionContext<ParamsType, NamedInputDataType, ConfigType>) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterFunction<ParamsType = DefaultParamsType, ResultType = DefaultResultData, NamedInputDataType = DefaultInputData> = (\n  context: AgentFunctionContext<ParamsType, NamedInputDataType>,\n  agent: AgentFunction,\n) => Promise<ResultData<ResultType>>;\n\nexport type AgentFilterInfo = {\n  name: string;\n  agent: AgentFilterFunction;\n  agentIds?: string[];\n  nodeIds?: string[];\n  filterParams?: AgentFilterParams;\n};\n\nexport type AgentFunctionInfoSample = {\n  inputs: any;\n  params: DefaultParamsType;\n  result: any;\n  graph?: GraphData;\n};\n\nexport type AgentFunctionInfo = {\n  name: string;\n  agent: AgentFunction<any, any, any, any>;\n  mock: AgentFunction<any, any, any, any>;\n  inputs?: any; // inputs data schema\n  output?: any; // output data schema\n  params?: any; // params data schema\n  config?: any; // config data schema\n  outputFormat?: any;\n  tools?: Record<string, any>[]; // function calling(tools) schema.\n  samples: AgentFunctionInfoSample[]; // sample data. This is for document and unit test.\n  description: string;\n  category: string[];\n  author: string;\n  repository: string;\n  source?: string;\n  package?: string;\n  license: string;\n  cacheType?: CacheTypes;\n  environmentVariables?: string[]; // Environment variables required for execution\n  hasGraphData?: boolean; // The agent that executes graph data using nestedAgentGenerator is true\n  stream?: boolean; // is stream support?\n  apiKeys?: string[];\n  npms?: string[];\n};\n\nexport type AgentFunctionInfoDictionary = Record<string, AgentFunctionInfo>;\n\nexport type PropFunction = (result: ResultData, propId: string) => ResultData;\n\nexport type CallbackFunction = (log: TransactionLog, isUpdate: boolean) => void;\n","import { DataSource, AgentFunction, AgentFunctionInfo, NodeData, StaticNodeData, ComputedNodeData, NodeState } from \"../type\";\n\nexport const sleep = async (milliseconds: number) => {\n  return await new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\n\nexport const parseNodeName = (inputNodeId: any, isSelfNode: boolean = false): DataSource => {\n  if (isSelfNode) {\n    if (typeof inputNodeId === \"string\" && inputNodeId[0] === \".\") {\n      const parts = inputNodeId.split(\".\");\n      return { nodeId: \"self\", propIds: parts.slice(1) };\n    }\n    return { value: inputNodeId };\n  }\n  if (typeof inputNodeId === \"string\") {\n    const regex = /^:(.*)$/;\n    const match = inputNodeId.match(regex);\n    if (!match) {\n      return { value: inputNodeId }; // string literal\n    }\n    const parts = match[1].split(/(?<!\\()\\.(?!\\))/);\n    if (parts.length == 1) {\n      return { nodeId: parts[0] };\n    }\n    return { nodeId: parts[0], propIds: parts.slice(1) };\n  }\n  return { value: inputNodeId }; // non-string literal\n};\n\nexport function assert(condition: boolean, message: string, isWarn: boolean = false): asserts condition {\n  if (!condition) {\n    if (!isWarn) {\n      throw new Error(message);\n    }\n    console.warn(\"warn: \" + message);\n  }\n}\n\nexport const isObject = <Values = unknown>(x: unknown): x is Record<string, Values> => {\n  return x !== null && typeof x === \"object\";\n};\n\nexport const isNull = (data: unknown) => {\n  return data === null || data === undefined;\n};\n\nexport const strIntentionalError = \"Intentional Error for Debugging\";\n\nexport const defaultAgentInfo = {\n  name: \"defaultAgentInfo\",\n  samples: [\n    {\n      inputs: [],\n      params: {},\n      result: {},\n    },\n  ],\n  description: \"\",\n  category: [],\n  author: \"\",\n  repository: \"\",\n  license: \"\",\n};\n\nexport const agentInfoWrapper = (agent: AgentFunction<any, any, any, any>): AgentFunctionInfo => {\n  return {\n    agent,\n    mock: agent,\n    ...defaultAgentInfo,\n  };\n};\n\nconst objectToKeyArray = (innerData: any) => {\n  const ret: string[][] = [];\n  Object.keys(innerData).forEach((key: string) => {\n    ret.push([key]);\n    if (Object.keys(innerData[key]).length > 0) {\n      objectToKeyArray(innerData[key]).forEach((tmp: string[]) => {\n        ret.push([key, ...tmp]);\n      });\n    }\n  });\n  return ret;\n};\n\nexport const debugResultKey = (agentId: string, result: any) => {\n  return objectToKeyArray({ [agentId]: debugResultKeyInner(result) }).map((objectKeys: string[]) => {\n    return \":\" + objectKeys.join(\".\");\n  });\n};\n\nconst debugResultKeyInner = (result: any) => {\n  if (result === null || result === undefined) {\n    return {};\n  }\n  if (typeof result === \"string\") {\n    return {};\n  }\n  if (Array.isArray(result)) {\n    return Array.from(result.keys()).reduce((tmp: Record<string, any>, index: number) => {\n      tmp[\"$\" + String(index)] = debugResultKeyInner(result[index]);\n      return tmp;\n    }, {});\n  }\n  return Object.keys(result).reduce((tmp: Record<string, any>, key: string) => {\n    tmp[key] = debugResultKeyInner(result[key]);\n    return tmp;\n  }, {});\n};\n\nexport const isLogicallyTrue = (value: any) => {\n  // Notice that empty aray is not true under GraphAI\n  if (Array.isArray(value) ? value.length === 0 : !value) {\n    return false;\n  }\n  return true;\n};\n\nexport const defaultTestContext = {\n  debugInfo: {\n    nodeId: \"test\",\n    retry: 0,\n    verbose: true,\n    state: NodeState.Executing,\n    subGraphs: new Map(),\n  },\n  params: {},\n  filterParams: {},\n  agents: {},\n  log: [],\n};\n\nexport const isNamedInputs = <Values = unknown>(namedInputs: unknown): namedInputs is Record<string, Values> => {\n  return isObject(namedInputs) && !Array.isArray(namedInputs) && Object.keys(namedInputs || {}).length > 0;\n};\n\nexport const isComputedNodeData = (node: NodeData): node is ComputedNodeData => {\n  return \"agent\" in node;\n};\n\nexport const isStaticNodeData = (node: NodeData): node is StaticNodeData => {\n  return !(\"agent\" in node);\n};\n","import { parseNodeName, isObject } from \"./utils\";\nimport { DataSource } from \"../type\";\n\n// for dataSource\nexport const inputs2dataSources = (inputs: any): DataSource[] => {\n  if (Array.isArray(inputs)) {\n    return inputs.map((inp) => inputs2dataSources(inp)).flat();\n  }\n  if (isObject(inputs)) {\n    return Object.values(inputs)\n      .map((input) => inputs2dataSources(input))\n      .flat();\n  }\n  if (typeof inputs === \"string\") {\n    const templateMatch = [...inputs.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      return inputs2dataSources(templateMatch);\n    }\n  }\n\n  return parseNodeName(inputs) as any;\n};\n\nexport const dataSourceNodeIds = (sources: DataSource[]): string[] => {\n  if (!Array.isArray(sources)) {\n    throw new Error(\"sources must be array!! maybe inputs is invalid\");\n  }\n  return sources.filter((source: DataSource) => source.nodeId).map((source) => source.nodeId!);\n};\n","import { ResultData, NodeDataParams, NodeState } from \"./type\";\nimport type { GraphAI } from \"./graphai\";\nimport type { ComputedNode, StaticNode } from \"./node\";\nimport { debugResultKey } from \"./utils/utils\";\nimport { dataSourceNodeIds } from \"./utils/nodeUtils\";\n\nexport class TransactionLog {\n  public nodeId: string;\n  public state: NodeState;\n  public startTime?: number;\n  public endTime?: number;\n  public retryCount?: number;\n  public agentId?: string;\n  public params?: NodeDataParams;\n  public inputs?: string[];\n  public inputsData?: Array<ResultData>;\n  public injectFrom?: string;\n  public errorMessage?: string;\n  public result?: ResultData;\n  public resultKeys?: string[];\n  public mapIndex?: number;\n  public isLoop?: boolean;\n  public repeatCount?: number;\n  public log?: TransactionLog[];\n  constructor(nodeId: string) {\n    this.nodeId = nodeId;\n    this.state = NodeState.Waiting;\n  }\n\n  public initForComputedNode(node: ComputedNode, graph: GraphAI) {\n    this.agentId = node.getAgentId();\n    this.params = node.params;\n    graph.appendLog(this);\n  }\n\n  public onInjected(node: StaticNode, graph: GraphAI, injectFrom?: string) {\n    const isUpdating = \"endTime\" in this;\n    this.result = node.result;\n    this.state = node.state;\n    this.endTime = Date.now();\n    this.injectFrom = injectFrom;\n    graph.setLoopLog(this);\n    // console.log(this)\n    if (isUpdating) {\n      graph.updateLog(this);\n    } else {\n      graph.appendLog(this);\n    }\n  }\n\n  public onComplete(node: ComputedNode, graph: GraphAI, localLog: TransactionLog[]) {\n    this.result = node.result;\n    this.resultKeys = debugResultKey(this.agentId || \"\", node.result);\n    this.state = node.state;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    if (localLog.length > 0) {\n      this.log = localLog;\n    }\n    graph.updateLog(this);\n  }\n\n  public beforeExecute(node: ComputedNode, graph: GraphAI, transactionId: number, inputs: ResultData[]) {\n    this.state = node.state;\n    this.retryCount = node.retryCount > 0 ? node.retryCount : undefined;\n    this.startTime = transactionId;\n    this.inputs = dataSourceNodeIds(node.dataSources);\n    this.inputsData = inputs.length > 0 ? inputs : undefined;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public beforeAddTask(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.appendLog(this);\n  }\n\n  public onError(node: ComputedNode, graph: GraphAI, errorMessage: string) {\n    this.state = node.state;\n    this.errorMessage = errorMessage;\n    this.endTime = Date.now();\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n\n  public onSkipped(node: ComputedNode, graph: GraphAI) {\n    this.state = node.state;\n    graph.setLoopLog(this);\n    graph.updateLog(this);\n  }\n}\n","import { PropFunction } from \"../type\";\nimport { isObject } from \"./utils\";\n\nexport const propFunctionRegex = /^[a-zA-Z]+\\([^)]*\\)$/;\n\nconst propArrayFunction: PropFunction = (result, propId) => {\n  if (Array.isArray(result)) {\n    if (propId === \"length()\") {\n      return result.length;\n    }\n    if (propId === \"flat()\") {\n      return result.flat();\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result);\n    }\n    if (propId === \"isEmpty()\") {\n      return result.length === 0;\n    }\n    // array join\n    const matchJoin = propId.match(/^join\\(([,-\\s]?)\\)$/);\n    if (matchJoin && Array.isArray(matchJoin)) {\n      return result.join(matchJoin[1] ?? \"\");\n    }\n  }\n  return undefined;\n};\n\nconst propObjectFunction: PropFunction = (result, propId) => {\n  if (isObject(result)) {\n    if (propId === \"keys()\") {\n      return Object.keys(result);\n    }\n    if (propId === \"values()\") {\n      return Object.values(result);\n    }\n    if (propId === \"toJSON()\") {\n      return JSON.stringify(result);\n    }\n  }\n  return undefined;\n};\n\nconst propStringFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"string\") {\n    if (propId === \"codeBlock()\") {\n      const match = (\"\\n\" + result).match(/\\n```[a-zA-z]*([\\s\\S]*?)\\n```/);\n      if (match) {\n        return match[1];\n      }\n    }\n    if (propId === \"jsonParse()\") {\n      return JSON.parse(result);\n    }\n    if (propId === \"toNumber()\") {\n      const ret = Number(result);\n      if (!isNaN(ret)) {\n        return ret;\n      }\n    }\n    if (propId === \"trim()\") {\n      return result.trim();\n    }\n    if (propId === \"toLowerCase()\") {\n      return result.toLowerCase();\n    }\n    if (propId === \"toUpperCase()\") {\n      return result.toUpperCase();\n    }\n    const sliceMatch = propId.match(/^slice\\((-?\\d+)(?:,\\s*(-?\\d+))?\\)/);\n    if (sliceMatch) {\n      if (sliceMatch[2] !== undefined) {\n        return result.slice(Number(sliceMatch[1]), Number(sliceMatch[2]));\n      }\n      if (sliceMatch[1] !== undefined) {\n        return result.slice(Number(sliceMatch[1]));\n      }\n\n      console.log(sliceMatch);\n    }\n\n    const splitMatch = propId.match(/^split\\(([-_:;.,\\s\\n]+)\\)$/);\n    if (splitMatch) {\n      return result.split(splitMatch[1]);\n    }\n  }\n  return undefined;\n};\nconst propNumberFunction: PropFunction = (result, propId) => {\n  if (result !== undefined && Number.isFinite(result)) {\n    if (propId === \"toString()\") {\n      return String(result);\n    }\n    const regex = /^add\\((-?\\d+)\\)$/;\n    const match = propId.match(regex);\n    if (match) {\n      return Number(result) + Number(match[1]);\n    }\n  }\n  return undefined;\n};\nconst propBooleanFunction: PropFunction = (result, propId) => {\n  if (typeof result === \"boolean\") {\n    if (propId === \"not()\") {\n      return !result;\n    }\n  }\n  return undefined;\n};\n\nexport const propFunctions = [propArrayFunction, propObjectFunction, propStringFunction, propNumberFunction, propBooleanFunction];\n","import { ResultData, DataSource, PropFunction } from \"../type\";\nimport { isObject, isNull } from \"./utils\";\nimport { propFunctionRegex } from \"./prop_function\";\n\nconst getNestedData = (result: ResultData, propId: string, propFunctions: PropFunction[]) => {\n  const match = propId.match(propFunctionRegex);\n  if (match) {\n    for (const propFunction of propFunctions) {\n      const ret = propFunction(result, propId);\n      if (!isNull(ret)) {\n        return ret;\n      }\n    }\n  }\n\n  // for array.\n  if (Array.isArray(result)) {\n    // $0, $1. array value.\n    const regex = /^\\$(\\d+)$/;\n    const match = propId.match(regex);\n    if (match) {\n      const index = parseInt(match[1], 10);\n      return result[index];\n    }\n    if (propId === \"$last\") {\n      return result[result.length - 1];\n    }\n  } else if (isObject(result)) {\n    if (propId in result) {\n      return result[propId];\n    }\n  }\n  return undefined;\n};\n\nconst innerGetDataFromSource = (result: ResultData, propIds: string[] | undefined, propFunctions: PropFunction[]): ResultData | undefined => {\n  if (!isNull(result) && propIds && propIds.length > 0) {\n    const propId = propIds[0];\n    const ret = getNestedData(result, propId, propFunctions);\n    if (ret === undefined) {\n      console.error(`prop: ${propIds.join(\".\")} is not hit`);\n    }\n    if (propIds.length > 1) {\n      return innerGetDataFromSource(ret, propIds.slice(1), propFunctions);\n    }\n    return ret;\n  }\n  return result;\n};\n\nexport const getDataFromSource = (result: ResultData | undefined, source: DataSource, propFunctions: PropFunction[] = []): ResultData | undefined => {\n  if (!source.nodeId) {\n    return source.value;\n  }\n  return innerGetDataFromSource(result, source.propIds, propFunctions);\n};\n","import { DataSource, ResultData, PropFunction } from \"../type\";\n\nimport { GraphNodes } from \"../node\";\n\nimport { parseNodeName, isNamedInputs, isObject, isNull } from \"./utils\";\nimport { getDataFromSource } from \"./data_source\";\n\nconst resultsOfInner = (input: any, nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean = false): ResultData => {\n  if (Array.isArray(input)) {\n    return input.map((inp) => resultsOfInner(inp, nodes, propFunctions, isSelfNode));\n  }\n  if (isNamedInputs(input)) {\n    return resultsOf(input, nodes, propFunctions, isSelfNode);\n  }\n  if (typeof input === \"string\") {\n    const templateMatch = [...input.matchAll(/\\${(:[^}]+)}/g)].map((m) => m[1]);\n    if (templateMatch.length > 0) {\n      const results = resultsOfInner(templateMatch, nodes, propFunctions, isSelfNode);\n      return Array.from(templateMatch.keys()).reduce((tmp, key) => {\n        return tmp.replaceAll(\"${\" + templateMatch[key] + \"}\", (results as any)[key]);\n      }, input);\n    }\n  }\n  return resultOf(parseNodeName(input, isSelfNode), nodes, propFunctions);\n};\n\nexport const resultsOf = (inputs: Record<string, any>, nodes: GraphNodes, propFunctions: PropFunction[], isSelfNode: boolean = false) => {\n  return Object.keys(inputs).reduce((tmp: Record<string, ResultData>, key) => {\n    const input = inputs[key];\n    tmp[key] = isNamedInputs(input) ? resultsOf(input, nodes, propFunctions, isSelfNode) : resultsOfInner(input, nodes, propFunctions, isSelfNode);\n    return tmp;\n  }, {});\n};\n\nexport const resultOf = (source: DataSource, nodes: GraphNodes, propFunctions: PropFunction[]) => {\n  const { result } = source.nodeId ? nodes[source.nodeId] : { result: undefined };\n  return getDataFromSource(result, source, propFunctions);\n};\n\n// clean up object for anyInput\nexport const cleanResultInner = (results: ResultData): ResultData | null => {\n  if (Array.isArray(results)) {\n    return results.map((result: ResultData) => cleanResultInner(result)).filter((result) => !isNull(result));\n  }\n\n  if (isObject<ResultData>(results)) {\n    return Object.keys(results).reduce((tmp: Record<string, ResultData>, key: string) => {\n      const value = cleanResultInner(results[key]);\n      if (!isNull(value)) {\n        tmp[key] = value;\n      }\n      return tmp;\n    }, {});\n  }\n\n  return results;\n};\n\nexport const cleanResult = (results: Record<string, ResultData | undefined>) => {\n  return Object.keys(results).reduce((tmp: Record<string, ResultData | undefined>, key: string) => {\n    const value = cleanResultInner(results[key]);\n    if (!isNull(value)) {\n      tmp[key] = value;\n    }\n    return tmp;\n  }, {});\n};\n","import type { GraphAI, GraphData } from \"./index\";\nimport { strIntentionalError } from \"./utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"./utils/nodeUtils\";\n\nimport {\n  NodeDataParams,\n  ResultData,\n  DataSource,\n  ComputedNodeData,\n  StaticNodeData,\n  NodeState,\n  AgentFunctionContext,\n  AgentFunction,\n  AgentFilterInfo,\n  AgentFilterParams,\n  AgentFunctionContextDebugInfo,\n  DefaultParamsType,\n  DefaultInputData,\n  PassThrough,\n  ConsoleElement,\n  ConfigData,\n} from \"./type\";\nimport { parseNodeName, assert, isLogicallyTrue, isObject } from \"./utils/utils\";\nimport { TransactionLog } from \"./transaction_log\";\nimport { resultsOf } from \"./utils/result\";\n\nexport class Node {\n  public readonly nodeId: string;\n  public readonly waitlist = new Set<string>(); // List of nodes which need data from this node.\n  public state = NodeState.Waiting;\n  public result: ResultData | undefined = undefined;\n\n  protected graph: GraphAI;\n  protected log: TransactionLog;\n  protected console: ConsoleElement; // console output option (before and/or after)\n\n  constructor(nodeId: string, graph: GraphAI) {\n    this.nodeId = nodeId;\n    this.graph = graph;\n    this.log = new TransactionLog(nodeId);\n    this.console = {};\n  }\n\n  public asString() {\n    return `${this.nodeId}: ${this.state} ${[...this.waitlist]}`;\n  }\n\n  // This method is called either as the result of computation (computed node) or\n  // injection (static node).\n  protected onSetResult() {\n    this.waitlist.forEach((waitingNodeId) => {\n      const waitingNode = this.graph.nodes[waitingNodeId];\n      if (waitingNode.isComputedNode) {\n        waitingNode.removePending(this.nodeId);\n        this.graph.pushQueueIfReadyAndRunning(waitingNode);\n      }\n    });\n  }\n\n  protected afterConsoleLog(result: ResultData) {\n    if (this.console === false) {\n      return;\n    } else if (this.console === true || this.console.after === true) {\n      console.log(typeof result === \"string\" ? result : JSON.stringify(result, null, 2));\n    } else if (this.console.after) {\n      if (isObject(this.console.after)) {\n        console.log(\n          JSON.stringify(resultsOf(this.console.after, { self: { result } as unknown as ComputedNode | StaticNode }, this.graph.propFunctions, true), null, 2),\n        );\n      } else {\n        console.log(this.console.after);\n      }\n    }\n  }\n}\n\nexport class ComputedNode extends Node {\n  public readonly graphId: string;\n  public readonly isResult: boolean;\n  public readonly params: NodeDataParams; // Agent-specific parameters\n  private readonly filterParams: AgentFilterParams;\n  public readonly nestedGraph?: GraphData | DataSource;\n  public readonly retryLimit: number;\n  public retryCount: number = 0;\n  private readonly agentId?: string;\n  private agentFunction?: AgentFunction<any, any, any, any>;\n  public readonly timeout?: number; // msec\n  public readonly priority: number;\n  public error?: Error;\n  public transactionId: undefined | number; // To reject callbacks from timed-out transactions\n  private readonly passThrough?: PassThrough;\n\n  public readonly anyInput: boolean; // any input makes this node ready\n  public dataSources: DataSource[] = []; // no longer needed. This is for transaction log.\n  private inputs?: Record<string, any>;\n  private output?: Record<string, any>;\n  public pendings: Set<string>; // List of nodes this node is waiting data from.\n  private ifSource?: DataSource; // conditional execution\n  private unlessSource?: DataSource; // conditional execution\n  private defaultValue?: ResultData;\n  private isSkip: boolean = false;\n  private debugInfo?: AgentFunctionContextDebugInfo;\n\n  public readonly isStaticNode = false;\n  public readonly isComputedNode = true;\n\n  constructor(graphId: string, nodeId: string, data: ComputedNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.graphId = graphId;\n    this.params = data.params ?? {};\n    this.console = data.console ?? {};\n    this.filterParams = data.filterParams ?? {};\n    this.passThrough = data.passThrough;\n    this.retryLimit = data.retry ?? graph.retryLimit ?? 0;\n    this.timeout = data.timeout;\n    this.isResult = data.isResult ?? false;\n    this.priority = data.priority ?? 0;\n\n    assert([\"function\", \"string\"].includes(typeof data.agent), \"agent must be either string or function\");\n    if (typeof data.agent === \"string\") {\n      this.agentId = data.agent;\n    } else {\n      const agent = data.agent;\n      this.agentFunction = async ({ namedInputs, params }) => agent(namedInputs, params);\n    }\n\n    this.anyInput = data.anyInput ?? false;\n    this.inputs = data.inputs;\n    this.output = data.output;\n    this.dataSources = [\n      ...(data.inputs ? inputs2dataSources(data.inputs).flat(10) : []),\n      ...(data.params ? inputs2dataSources(data.params).flat(10) : []),\n      ...(this.agentId ? [parseNodeName(this.agentId)] : []),\n    ];\n    if (data.inputs && Array.isArray(data.inputs)) {\n      throw new Error(`array inputs have been deprecated. nodeId: ${nodeId}: see https://github.com/receptron/graphai/blob/main/docs/NamedInputs.md`);\n    }\n\n    this.pendings = new Set(dataSourceNodeIds(this.dataSources));\n    if (data.graph) {\n      this.nestedGraph = typeof data.graph === \"string\" ? this.addPendingNode(data.graph) : data.graph;\n    }\n    if (data.graphLoader && graph.graphLoader) {\n      this.nestedGraph = graph.graphLoader(data.graphLoader);\n    }\n    if (data.if) {\n      this.ifSource = this.addPendingNode(data.if);\n    }\n    if (data.unless) {\n      this.unlessSource = this.addPendingNode(data.unless);\n    }\n    if (data.defaultValue) {\n      this.defaultValue = data.defaultValue;\n    }\n    this.isSkip = false;\n    this.log.initForComputedNode(this, graph);\n  }\n\n  public getAgentId() {\n    return this.agentId ?? \"__custom__function\"; // only for display purpose in the log.\n  }\n\n  private getConfig(hasGraphData: boolean, agentId?: string) {\n    if (agentId) {\n      if (hasGraphData) {\n        return this.graph.config;\n      }\n      const config = this.graph.config ?? {};\n      return {\n        ...(config[\"global\"] ?? {}),\n        ...(config[agentId] ?? {}),\n      };\n    }\n    return {};\n  }\n\n  private addPendingNode(nodeId: string) {\n    const source = parseNodeName(nodeId);\n    assert(!!source.nodeId, `Invalid data source ${nodeId}`);\n    this.pendings.add(source.nodeId);\n    return source;\n  }\n\n  private updateState(state: NodeState) {\n    this.state = state;\n    if (this.debugInfo) {\n      this.debugInfo.state = state;\n    }\n  }\n\n  public resetPending() {\n    this.pendings.clear();\n    if (this.state === NodeState.Executing) {\n      this.updateState(NodeState.Abort);\n    }\n    if (this.debugInfo && this.debugInfo.subGraphs) {\n      this.debugInfo.subGraphs.forEach((graph) => graph.abort());\n    }\n  }\n\n  public isReadyNode() {\n    if (this.state !== NodeState.Waiting || this.pendings.size !== 0) {\n      return false;\n    }\n    this.isSkip = !!(\n      (this.ifSource && !isLogicallyTrue(this.graph.resultOf(this.ifSource))) ||\n      (this.unlessSource && isLogicallyTrue(this.graph.resultOf(this.unlessSource)))\n    );\n\n    if (this.isSkip && this.defaultValue === undefined) {\n      this.updateState(NodeState.Skipped);\n      this.log.onSkipped(this, this.graph);\n      return false;\n    }\n    return true;\n  }\n\n  // This private method (only called while executing execute()) performs\n  // the \"retry\" if specified. The transaction log must be updated before\n  // callling this method.\n  private retry(state: NodeState, error: Error) {\n    this.updateState(state); // this.execute() will update to NodeState.Executing\n    this.log.onError(this, this.graph, error.message);\n\n    if (this.retryCount < this.retryLimit) {\n      this.retryCount++;\n      this.execute();\n    } else {\n      this.result = undefined;\n      this.error = error;\n      this.transactionId = undefined; // This is necessary for timeout case\n      this.graph.onExecutionComplete(this);\n    }\n  }\n\n  private checkDataAvailability() {\n    return Object.values(this.graph.resultsOf(this.inputs))\n      .flat()\n      .some((result) => result !== undefined);\n  }\n\n  // This method is called right before the Graph add this node to the task manager.\n  public beforeAddTask() {\n    this.updateState(NodeState.Queued);\n    this.log.beforeAddTask(this, this.graph);\n  }\n\n  // This method is called when the data became available on one of nodes,\n  // which this node needs data from.\n  public removePending(nodeId: string) {\n    if (this.anyInput) {\n      if (this.checkDataAvailability()) {\n        this.pendings.clear();\n      }\n    } else {\n      this.pendings.delete(nodeId);\n    }\n  }\n\n  private isCurrentTransaction(transactionId: number) {\n    return this.transactionId === transactionId;\n  }\n\n  // This private method (called only fro execute) checks if the callback from\n  // the timer came before the completion of agent function call, record it\n  // and attempt to retry (if specified).\n  private executeTimeout(transactionId: number) {\n    if (this.state === NodeState.Executing && this.isCurrentTransaction(transactionId)) {\n      console.warn(`-- timeout ${this.timeout} with ${this.nodeId}`);\n      this.retry(NodeState.TimedOut, Error(\"Timeout\"));\n    }\n  }\n\n  // Check if we need to apply this filter to this node or not.\n  private shouldApplyAgentFilter(agentFilter: AgentFilterInfo, agentId?: string) {\n    if (agentFilter.agentIds && Array.isArray(agentFilter.agentIds) && agentFilter.agentIds.length > 0) {\n      if (agentId && agentFilter.agentIds.includes(agentId)) {\n        return true;\n      }\n    }\n    if (agentFilter.nodeIds && Array.isArray(agentFilter.nodeIds) && agentFilter.nodeIds.length > 0) {\n      if (agentFilter.nodeIds.includes(this.nodeId)) {\n        return true;\n      }\n    }\n    return !agentFilter.agentIds && !agentFilter.nodeIds;\n  }\n\n  private agentFilterHandler(context: AgentFunctionContext, agentFunction: AgentFunction, agentId?: string): Promise<ResultData> {\n    let index = 0;\n\n    const next = (innerContext: AgentFunctionContext): Promise<ResultData> => {\n      const agentFilter = this.graph.agentFilters[index++];\n      if (agentFilter) {\n        if (this.shouldApplyAgentFilter(agentFilter, agentId)) {\n          if (agentFilter.filterParams) {\n            innerContext.filterParams = { ...agentFilter.filterParams, ...innerContext.filterParams };\n          }\n          return agentFilter.agent(innerContext, next);\n        }\n        return next(innerContext);\n      }\n      return agentFunction(innerContext);\n    };\n\n    return next(context);\n  }\n\n  // This method is called when this computed node became ready to run.\n  // It asynchronously calls the associated with agent function and set the result,\n  // then it removes itself from the \"running node\" list of the graph.\n  // Notice that setting the result of this node may make other nodes ready to run.\n  public async execute() {\n    if (this.isSkip) {\n      this.afterExecute(this.defaultValue, []);\n      return;\n    }\n    const previousResults = this.graph.resultsOf(this.inputs, this.anyInput);\n    const agentId = this.agentId ? (this.graph.resultOf(parseNodeName(this.agentId)) as string) : this.agentId;\n    if (typeof agentId === \"function\") {\n      this.agentFunction = agentId;\n    }\n    const hasNestedGraph = Boolean(this.nestedGraph) || Boolean(agentId && this.graph.getAgentFunctionInfo(agentId).hasGraphData);\n    const config: ConfigData | undefined = this.getConfig(hasNestedGraph, agentId);\n\n    const transactionId = Date.now();\n    this.prepareExecute(transactionId, Object.values(previousResults));\n\n    if (this.timeout && this.timeout > 0) {\n      setTimeout(() => {\n        this.executeTimeout(transactionId);\n      }, this.timeout);\n    }\n\n    try {\n      const agentFunction = this.agentFunction ?? this.graph.getAgentFunctionInfo(agentId).agent;\n      const localLog: TransactionLog[] = [];\n      const context = this.getContext(previousResults, localLog, agentId, config);\n\n      // NOTE: We use the existence of graph object in the agent-specific params to determine\n      // if this is a nested agent or not.\n      if (hasNestedGraph) {\n        this.graph.taskManager.prepareForNesting();\n        context.forNestedGraph = {\n          graphData: this.nestedGraph\n            ? \"nodes\" in this.nestedGraph\n              ? this.nestedGraph\n              : (this.graph.resultOf(this.nestedGraph) as GraphData) // HACK: compiler work-around\n            : { version: 0, nodes: {} },\n          agents: this.graph.agentFunctionInfoDictionary,\n          graphOptions: {\n            agentFilters: this.graph.agentFilters,\n            taskManager: this.graph.taskManager,\n            bypassAgentIds: this.graph.bypassAgentIds,\n            config,\n            graphLoader: this.graph.graphLoader,\n          },\n          onLogCallback: this.graph.onLogCallback,\n          callbacks: this.graph.callbacks,\n        };\n      }\n\n      this.beforeConsoleLog(context);\n      const result = await this.agentFilterHandler(context as AgentFunctionContext, agentFunction, agentId);\n      this.afterConsoleLog(result);\n\n      if (hasNestedGraph) {\n        this.graph.taskManager.restoreAfterNesting();\n      }\n\n      if (!this.isCurrentTransaction(transactionId)) {\n        // This condition happens when the agent function returns\n        // after the timeout (either retried or not).\n        console.log(`-- transactionId mismatch with ${this.nodeId} (probably timeout)`);\n        return;\n      }\n\n      // after process\n      this.afterExecute(result, localLog);\n    } catch (error) {\n      this.errorProcess(error, transactionId, previousResults);\n    }\n  }\n\n  private afterExecute(result: ResultData, localLog: TransactionLog[]) {\n    if (this.state == NodeState.Abort) {\n      return;\n    }\n    this.updateState(NodeState.Completed);\n    this.result = this.getResult(result);\n    if (this.output) {\n      this.result = resultsOf(this.output, { self: this }, this.graph.propFunctions, true);\n    }\n    this.log.onComplete(this, this.graph, localLog);\n\n    this.onSetResult();\n\n    this.graph.onExecutionComplete(this);\n  }\n\n  // This private method (called only by execute()) prepares the ComputedNode object\n  // for execution, and create a new transaction to record it.\n  private prepareExecute(transactionId: number, inputs: Array<ResultData>) {\n    this.updateState(NodeState.Executing);\n    this.log.beforeExecute(this, this.graph, transactionId, inputs);\n    this.transactionId = transactionId;\n  }\n\n  // This private method (called only by execute) processes an error received from\n  // the agent function. It records the error in the transaction log and handles\n  // the retry if specified.\n  private errorProcess(error: unknown, transactionId: number, namedInputs: DefaultInputData) {\n    if (error instanceof Error && error.message !== strIntentionalError) {\n      console.error(`<-- NodeId: ${this.nodeId}, Agent: ${this.agentId}`);\n      console.error({ namedInputs });\n      console.error(error);\n      console.error(\"-->\");\n    }\n    if (!this.isCurrentTransaction(transactionId)) {\n      console.warn(`-- transactionId mismatch with ${this.nodeId} (not timeout)`);\n      return;\n    }\n\n    if (error instanceof Error) {\n      this.retry(NodeState.Failed, error);\n    } else {\n      console.error(`-- NodeId: ${this.nodeId}: Unknown error was caught`);\n      this.retry(NodeState.Failed, Error(\"Unknown\"));\n    }\n  }\n\n  private getContext(previousResults: Record<string, ResultData | undefined>, localLog: TransactionLog[], agentId?: string, config?: ConfigData) {\n    // Pass debugInfo by reference, and the state of this node will be received by agent/agentFilter.\n    // From graphAgent(nested, map), set the instance of graphai, and use abort on the child graphai.\n    this.debugInfo = this.getDebugInfo(agentId);\n    const context: AgentFunctionContext<DefaultParamsType, DefaultInputData | string | number | boolean | undefined> = {\n      params: this.graph.resultsOf(this.params),\n      namedInputs: previousResults,\n      inputSchema: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(agentId)?.inputs,\n      debugInfo: this.debugInfo,\n      cacheType: this.agentFunction ? undefined : this.graph.getAgentFunctionInfo(agentId)?.cacheType,\n      filterParams: this.filterParams,\n      config,\n      log: localLog,\n    };\n    return context;\n  }\n\n  private getResult(result: ResultData) {\n    if (result && this.passThrough) {\n      if (isObject(result) && !Array.isArray(result)) {\n        return { ...result, ...this.passThrough };\n      } else if (Array.isArray(result)) {\n        return result.map((r) => (isObject(r) && !Array.isArray(r) ? { ...r, ...this.passThrough } : r));\n      }\n    }\n    return result;\n  }\n\n  private getDebugInfo(agentId?: string) {\n    return {\n      nodeId: this.nodeId,\n      agentId,\n      retry: this.retryCount,\n      state: this.state,\n      subGraphs: new Map(),\n      verbose: this.graph.verbose,\n      version: this.graph.version,\n      isResult: this.isResult,\n    };\n  }\n\n  private beforeConsoleLog(context: AgentFunctionContext<DefaultParamsType, string | number | boolean | DefaultInputData | undefined>) {\n    if (this.console === false) {\n      return;\n    } else if (this.console === true || this.console.before === true) {\n      console.log(JSON.stringify(context.namedInputs, null, 2));\n    } else if (this.console.before) {\n      console.log(this.console.before);\n    }\n  }\n}\n\nexport class StaticNode extends Node {\n  public value?: ResultData;\n  public readonly update?: DataSource;\n  public readonly isResult: boolean;\n  public readonly isStaticNode = true;\n  public readonly isComputedNode = false;\n\n  constructor(nodeId: string, data: StaticNodeData, graph: GraphAI) {\n    super(nodeId, graph);\n    this.value = data.value;\n    this.update = data.update ? parseNodeName(data.update) : undefined;\n    this.isResult = data.isResult ?? false;\n    this.console = data.console ?? {};\n  }\n\n  public injectValue(value: ResultData, injectFrom?: string) {\n    this.state = NodeState.Injected;\n    this.result = value;\n    this.log.onInjected(this, this.graph, injectFrom);\n    this.onSetResult();\n  }\n\n  public consoleLog() {\n    this.afterConsoleLog(this.result);\n  }\n}\n\nexport type GraphNodes = Record<string, ComputedNode | StaticNode>;\n","export const graphDataAttributeKeys = [\"nodes\", \"concurrency\", \"agentId\", \"loop\", \"verbose\", \"version\", \"metadata\"];\n\nexport const computedNodeAttributeKeys = [\n  \"inputs\",\n  \"output\",\n  \"anyInput\",\n  \"params\",\n  \"retry\",\n  \"timeout\",\n  \"agent\",\n  \"graph\",\n  \"graphLoader\",\n  \"isResult\",\n  \"priority\",\n  \"if\",\n  \"unless\",\n  \"defaultValue\",\n  \"filterParams\",\n  \"console\",\n  \"passThrough\",\n];\nexport const staticNodeAttributeKeys = [\"value\", \"update\", \"isResult\", \"console\"];\n\nexport class ValidationError extends Error {\n  constructor(message: string) {\n    super(`\\x1b[41m${message}\\x1b[0m`); // Pass the message to the base Error class\n\n    // Set the prototype explicitly to ensure correct prototype chain\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n","import { GraphData } from \"../type\";\nimport { graphDataAttributeKeys, ValidationError } from \"./common\";\n\nexport const graphNodesValidator = (data: GraphData) => {\n  if (data.nodes === undefined) {\n    throw new ValidationError(\"Invalid Graph Data: no nodes\");\n  }\n  if (typeof data.nodes !== \"object\") {\n    throw new ValidationError(\"Invalid Graph Data: invalid nodes\");\n  }\n  if (Array.isArray(data.nodes)) {\n    throw new ValidationError(\"Invalid Graph Data: nodes must be object\");\n  }\n  if (Object.keys(data.nodes).length === 0) {\n    throw new ValidationError(\"Invalid Graph Data: nodes is empty\");\n  }\n  Object.keys(data).forEach((key) => {\n    if (!graphDataAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Graph Data does not allow \" + key);\n    }\n  });\n};\nexport const graphDataValidator = (data: GraphData) => {\n  if (data.loop) {\n    if (data.loop.count === undefined && data.loop.while === undefined) {\n      throw new ValidationError(\"Loop: Either count or while is required in loop\");\n    }\n    if (data.loop.count !== undefined && data.loop.while !== undefined) {\n      throw new ValidationError(\"Loop: Both count and while cannot be set\");\n    }\n  }\n  if (data.concurrency !== undefined) {\n    if (!Number.isInteger(data.concurrency)) {\n      throw new ValidationError(\"Concurrency must be an integer\");\n    }\n    if (data.concurrency < 1) {\n      throw new ValidationError(\"Concurrency must be a positive integer\");\n    }\n  }\n};\n","import { GraphData, AgentFunctionInfoDictionary } from \"./type\";\nimport { isStaticNodeData } from \"./utils/utils\";\nimport { graphNodesValidator, graphDataValidator } from \"./validators/graph_data_validator\";\nimport { nodeValidator } from \"./validators/nodeValidator\";\nimport { staticNodeValidator } from \"./validators/static_node_validator\";\nimport { computedNodeValidator } from \"./validators/computed_node_validator\";\nimport { relationValidator } from \"./validators/relation_validator\";\nimport { agentValidator } from \"./validators/agent_validator\";\n\nimport { ValidationError } from \"./validators/common\";\n\nexport const validateGraphData = (data: GraphData, agentIds: string[]) => {\n  graphNodesValidator(data);\n  graphDataValidator(data);\n  const computedNodeIds: string[] = [];\n  const staticNodeIds: string[] = [];\n  const graphAgentIds = new Set<string>();\n  Object.keys(data.nodes).forEach((nodeId) => {\n    const node = data.nodes[nodeId];\n    const isStaticNode = isStaticNodeData(node);\n    nodeValidator(node);\n    const agentId = isStaticNode ? \"\" : node.agent;\n    isStaticNode && staticNodeValidator(node) && staticNodeIds.push(nodeId);\n    !isStaticNode && computedNodeValidator(node) && computedNodeIds.push(nodeId) && typeof agentId === \"string\" && graphAgentIds.add(agentId);\n  });\n  agentValidator(graphAgentIds, new Set<string>(agentIds));\n  relationValidator(data, staticNodeIds, computedNodeIds);\n\n  return true;\n};\n\nexport const validateAgent = (agentFunctionInfoDictionary: AgentFunctionInfoDictionary) => {\n  Object.keys(agentFunctionInfoDictionary).forEach((agentId: string) => {\n    if (agentId !== \"default\") {\n      const agentInfo = agentFunctionInfoDictionary[agentId];\n      if (!agentInfo || !agentInfo.agent) {\n        throw new ValidationError(\"No Agent: \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n      }\n    }\n  });\n};\n","import { NodeData, StaticNodeData, ComputedNodeData } from \"../type\";\nimport { ValidationError } from \"./common\";\n\nexport const nodeValidator = (nodeData: NodeData) => {\n  if ((nodeData as ComputedNodeData).agent && (nodeData as StaticNodeData).value) {\n    throw new ValidationError(\"Cannot set both agent and value\");\n  }\n  // if (!(\"agent\" in nodeData) && !(\"value\" in nodeData)) {\n  //   throw new ValidationError(\"Either agent or value is required\");\n  // }\n  return true;\n};\n","import { StaticNodeData } from \"../type\";\nimport { staticNodeAttributeKeys, ValidationError } from \"./common\";\n\nexport const staticNodeValidator = (nodeData: StaticNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!staticNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Static node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ComputedNodeData } from \"../type\";\nimport { computedNodeAttributeKeys, ValidationError } from \"./common\";\n\nexport const computedNodeValidator = (nodeData: ComputedNodeData) => {\n  Object.keys(nodeData).forEach((key) => {\n    if (!computedNodeAttributeKeys.includes(key)) {\n      throw new ValidationError(\"Computed node does not allow \" + key);\n    }\n  });\n  return true;\n};\n","import { ValidationError } from \"./common\";\n\nexport const agentValidator = (graphAgentIds: Set<string>, agentIds: Set<string>) => {\n  graphAgentIds.forEach((agentId) => {\n    // agentId or dynamic agentId\n    if (!agentIds.has(agentId) && agentId[0] !== \":\") {\n      throw new ValidationError(\"Invalid Agent : \" + agentId + \" is not in AgentFunctionInfoDictionary.\");\n    }\n  });\n  return true;\n};\n","import { GraphData } from \"../type\";\nimport { parseNodeName, isComputedNodeData, isStaticNodeData } from \"../utils/utils\";\nimport { inputs2dataSources, dataSourceNodeIds } from \"../utils/nodeUtils\";\nimport { ValidationError } from \"./common\";\n\nexport const relationValidator = (graphData: GraphData, staticNodeIds: string[], computedNodeIds: string[]) => {\n  const nodeIds = new Set<string>(Object.keys(graphData.nodes));\n\n  const pendings: Record<string, Set<string>> = {};\n  const waitlist: Record<string, Set<string>> = {};\n\n  // validate input relation and set pendings and wait list\n  computedNodeIds.forEach((computedNodeId) => {\n    const nodeData = graphData.nodes[computedNodeId];\n    pendings[computedNodeId] = new Set<string>();\n\n    const dataSourceValidator = (sourceType: string, sourceNodeIds: string[]) => {\n      sourceNodeIds.forEach((sourceNodeId) => {\n        if (sourceNodeId) {\n          if (!nodeIds.has(sourceNodeId)) {\n            throw new ValidationError(`${sourceType} not match: NodeId ${computedNodeId}, Inputs: ${sourceNodeId}`);\n          }\n          waitlist[sourceNodeId] === undefined && (waitlist[sourceNodeId] = new Set<string>());\n          pendings[computedNodeId].add(sourceNodeId);\n          waitlist[sourceNodeId].add(computedNodeId);\n        }\n      });\n    };\n    if (nodeData && isComputedNodeData(nodeData)) {\n      if (nodeData.inputs) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.inputs));\n        dataSourceValidator(\"Inputs\", sourceNodeIds);\n      }\n      if (nodeData.params) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources(nodeData.params));\n        dataSourceValidator(\"Params\", sourceNodeIds);\n      }\n      if (nodeData.if) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ if: nodeData.if }));\n        dataSourceValidator(\"If\", sourceNodeIds);\n      }\n      if (nodeData.unless) {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ unless: nodeData.unless }));\n        dataSourceValidator(\"Unless\", sourceNodeIds);\n      }\n      if (nodeData.graph && typeof nodeData?.graph === \"string\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ graph: nodeData.graph }));\n        dataSourceValidator(\"Graph\", sourceNodeIds);\n      }\n      if (typeof nodeData.agent === \"string\" && nodeData.agent[0] === \":\") {\n        const sourceNodeIds = dataSourceNodeIds(inputs2dataSources({ agent: nodeData.agent }));\n        dataSourceValidator(\"Agent\", sourceNodeIds);\n      }\n    }\n  });\n\n  // TODO. validate update\n  staticNodeIds.forEach((staticNodeId) => {\n    const nodeData = graphData.nodes[staticNodeId];\n    if (isStaticNodeData(nodeData) && nodeData.update) {\n      const update = nodeData.update;\n      const updateNodeId = parseNodeName(update).nodeId;\n      if (!updateNodeId) {\n        throw new ValidationError(\"Update it a literal\");\n      }\n      if (!nodeIds.has(updateNodeId)) {\n        throw new ValidationError(`Update not match: NodeId ${staticNodeId}, update: ${update}`);\n      }\n    }\n  });\n\n  const cycle = (possibles: string[]) => {\n    possibles.forEach((possobleNodeId) => {\n      (waitlist[possobleNodeId] || []).forEach((waitingNodeId) => {\n        pendings[waitingNodeId].delete(possobleNodeId);\n      });\n    });\n\n    const running: string[] = [];\n    Object.keys(pendings).forEach((pendingNodeId) => {\n      if (pendings[pendingNodeId].size === 0) {\n        running.push(pendingNodeId);\n        delete pendings[pendingNodeId];\n      }\n    });\n    return running;\n  };\n\n  let runningQueue = cycle(staticNodeIds);\n  if (runningQueue.length === 0) {\n    throw new ValidationError(\"No Initial Runnning Node\");\n  }\n\n  do {\n    runningQueue = cycle(runningQueue);\n  } while (runningQueue.length > 0);\n\n  if (Object.keys(pendings).length > 0) {\n    throw new ValidationError(\"Some nodes are not executed: \" + Object.keys(pendings).join(\", \"));\n  }\n};\n","import { ComputedNode } from \"./node\";\nimport { assert } from \"./utils/utils\";\n\ntype TaskEntry = {\n  node: ComputedNode;\n  graphId: string;\n  callback: (node: ComputedNode) => void;\n};\n\n// TaskManage object controls the concurrency of ComputedNode execution.\n//\n// NOTE: A TaskManager instance will be shared between parent graph and its children\n// when nested agents are involved.\nexport class TaskManager {\n  private concurrency: number;\n  private taskQueue: Array<TaskEntry> = [];\n  private runningNodes = new Set<ComputedNode>();\n\n  constructor(concurrency: number) {\n    this.concurrency = concurrency;\n  }\n\n  // This internal method dequeus a task from the task queue\n  // and call the associated callback method, if the number of\n  // running task is lower than the spcified limit.\n  private dequeueTaskIfPossible() {\n    if (this.runningNodes.size < this.concurrency) {\n      const task = this.taskQueue.shift();\n      if (task) {\n        this.runningNodes.add(task.node);\n        task.callback(task.node);\n      }\n    }\n  }\n\n  // Node will call this method to put itself in the execution queue.\n  // We call the associated callback function when it is dequeued.\n  public addTask(node: ComputedNode, graphId: string, callback: (node: ComputedNode) => void) {\n    // Finder tasks in the queue, which has either the same or higher priority.\n    const count = this.taskQueue.filter((task) => {\n      return task.node.priority >= node.priority;\n    }).length;\n    assert(count <= this.taskQueue.length, \"TaskManager.addTask: Something is really wrong.\");\n    this.taskQueue.splice(count, 0, { node, graphId, callback });\n    this.dequeueTaskIfPossible();\n  }\n\n  public isRunning(graphId: string) {\n    const count = [...this.runningNodes].filter((node) => {\n      return node.graphId == graphId;\n    }).length;\n    return count > 0 || Array.from(this.taskQueue).filter((data) => data.graphId === graphId).length > 0;\n  }\n\n  // Node MUST call this method once the execution of agent function is completed\n  // either successfully or not.\n  public onComplete(node: ComputedNode) {\n    assert(this.runningNodes.has(node), `TaskManager.onComplete node(${node.nodeId}) is not in list`);\n    this.runningNodes.delete(node);\n    this.dequeueTaskIfPossible();\n  }\n\n  // Node will call this method before it hands the task manager from the graph\n  // to a nested agent. We need to make it sure that there is enough room to run\n  // computed nodes inside the nested graph to avoid a deadlock.\n  public prepareForNesting() {\n    this.concurrency++;\n  }\n\n  public restoreAfterNesting() {\n    this.concurrency--;\n  }\n\n  public getStatus(verbose: boolean = false) {\n    const runningNodes = Array.from(this.runningNodes).map((node) => node.nodeId);\n    const queuedNodes = this.taskQueue.map((task) => task.node.nodeId);\n    const nodes = verbose ? { runningNodes, queuedNodes } : {};\n    return {\n      concurrency: this.concurrency,\n      queue: this.taskQueue.length,\n      running: this.runningNodes.size,\n      ...nodes,\n    };\n  }\n}\n","import {\n  AgentFunctionInfoDictionary,\n  AgentFilterInfo,\n  GraphData,\n  DataSource,\n  LoopData,\n  ResultDataDictionary,\n  ResultData,\n  DefaultResultData,\n  GraphOptions,\n  PropFunction,\n  GraphDataLoader,\n  ConfigDataDictionary,\n  CallbackFunction,\n} from \"./type\";\nimport { TransactionLog } from \"./transaction_log\";\n\nimport { ComputedNode, StaticNode, GraphNodes } from \"./node\";\n\nimport { resultsOf, resultOf, cleanResult } from \"./utils/result\";\nimport { propFunctions } from \"./utils/prop_function\";\nimport { parseNodeName, assert, isLogicallyTrue, isComputedNodeData } from \"./utils/utils\";\nimport { getDataFromSource } from \"./utils/data_source\";\n\nimport { validateGraphData, validateAgent } from \"./validator\";\nimport { TaskManager } from \"./task_manager\";\n\nexport const defaultConcurrency = 8;\nexport const graphDataLatestVersion = 0.5;\n\nexport class GraphAI {\n  public readonly version: number;\n  public readonly graphId: string;\n  private readonly graphData: GraphData;\n  private readonly loop?: LoopData;\n  private readonly logs: Array<TransactionLog> = [];\n  public readonly bypassAgentIds: string[];\n  public readonly config?: ConfigDataDictionary = {};\n  public readonly agentFunctionInfoDictionary: AgentFunctionInfoDictionary;\n  public readonly taskManager: TaskManager;\n  public readonly agentFilters: AgentFilterInfo[];\n  public readonly retryLimit?: number;\n  public readonly propFunctions: PropFunction[];\n  public readonly graphLoader?: GraphDataLoader;\n\n  public nodes: GraphNodes;\n  public onLogCallback: CallbackFunction = (__log: TransactionLog, __isUpdate: boolean) => {};\n  public callbacks: CallbackFunction[] = [];\n  public verbose: boolean; // REVIEW: Do we need this?\n\n  private onComplete: (isAbort: boolean) => void;\n  private repeatCount = 0;\n\n  // This method is called when either the GraphAI obect was created,\n  // or we are about to start n-th iteration (n>2).\n  private createNodes(graphData: GraphData) {\n    const nodes = Object.keys(graphData.nodes).reduce((_nodes: GraphNodes, nodeId: string) => {\n      const nodeData = graphData.nodes[nodeId];\n      if (isComputedNodeData(nodeData)) {\n        _nodes[nodeId] = new ComputedNode(this.graphId, nodeId, nodeData, this);\n      } else {\n        _nodes[nodeId] = new StaticNode(nodeId, nodeData, this);\n      }\n      return _nodes;\n    }, {});\n\n    // Generate the waitlist for each node.\n    Object.keys(nodes).forEach((nodeId) => {\n      const node = nodes[nodeId];\n      if (node.isComputedNode) {\n        node.pendings.forEach((pending) => {\n          if (nodes[pending]) {\n            nodes[pending].waitlist.add(nodeId); // previousNode\n          } else {\n            throw new Error(`createNode: invalid input ${pending} for node, ${nodeId}`);\n          }\n        });\n      }\n    });\n    return nodes;\n  }\n\n  private getValueFromResults(source: DataSource, results: ResultDataDictionary<DefaultResultData>) {\n    return getDataFromSource(source.nodeId ? results[source.nodeId] : undefined, source, this.propFunctions);\n  }\n\n  // for static\n  private initializeStaticNodes(enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.graphData.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const value = node?.value;\n        if (value !== undefined) {\n          this.injectValue(nodeId, value, nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  private updateStaticNodes(previousResults?: ResultDataDictionary<DefaultResultData>, enableConsoleLog: boolean = false) {\n    // If the result property is specified, inject it.\n    // If the previousResults exists (indicating we are in a loop),\n    // process the update property (nodeId or nodeId.propId).\n    Object.keys(this.graphData.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node?.isStaticNode) {\n        const update = node?.update;\n        if (update && previousResults) {\n          const result = this.getValueFromResults(update, previousResults);\n          this.injectValue(nodeId, result, update.nodeId);\n        }\n        if (enableConsoleLog) {\n          node.consoleLog();\n        }\n      }\n    });\n  }\n\n  constructor(\n    graphData: GraphData,\n    agentFunctionInfoDictionary: AgentFunctionInfoDictionary,\n    options: GraphOptions = {\n      taskManager: undefined,\n      agentFilters: [],\n      bypassAgentIds: [],\n      config: {},\n      graphLoader: undefined,\n    },\n  ) {\n    if (!graphData.version && !options.taskManager) {\n      console.warn(\"------------ missing version number\");\n    }\n    this.version = graphData.version ?? graphDataLatestVersion;\n    if (this.version < graphDataLatestVersion) {\n      console.warn(`------------ upgrade to ${graphDataLatestVersion}!`);\n    }\n    this.retryLimit = graphData.retry; // optional\n    this.graphId = `${Date.now().toString(36)}-${Math.random().toString(36).substr(2, 9)}`; // URL.createObjectURL(new Blob()).slice(-36);\n    this.graphData = graphData;\n    this.agentFunctionInfoDictionary = agentFunctionInfoDictionary;\n    this.propFunctions = propFunctions;\n    this.taskManager = options.taskManager ?? new TaskManager(graphData.concurrency ?? defaultConcurrency);\n    this.agentFilters = options.agentFilters ?? [];\n    this.bypassAgentIds = options.bypassAgentIds ?? [];\n    this.config = options.config;\n    this.graphLoader = options.graphLoader;\n    this.loop = graphData.loop;\n    this.verbose = graphData.verbose === true;\n    this.onComplete = (__isAbort: boolean) => {\n      throw new Error(\"SOMETHING IS WRONG: onComplete is called without run()\");\n    };\n\n    validateGraphData(graphData, [...Object.keys(agentFunctionInfoDictionary), ...this.bypassAgentIds]);\n    validateAgent(agentFunctionInfoDictionary);\n\n    this.nodes = this.createNodes(graphData);\n    this.initializeStaticNodes(true);\n  }\n\n  public getAgentFunctionInfo(agentId?: string) {\n    if (agentId && this.agentFunctionInfoDictionary[agentId]) {\n      return this.agentFunctionInfoDictionary[agentId];\n    }\n    if (agentId && this.bypassAgentIds.includes(agentId)) {\n      return {\n        agent: async () => {\n          return null;\n        },\n        hasGraphData: false,\n        inputs: null,\n        cacheType: undefined, // for node.getContext\n      };\n    }\n    // We are not supposed to hit this error because the validator will catch it.\n    throw new Error(\"No agent: \" + agentId);\n  }\n\n  public asString() {\n    return Object.values(this.nodes)\n      .map((node) => node.asString())\n      .join(\"\\n\");\n  }\n\n  // Public API\n  public results<T = DefaultResultData>(all: boolean): ResultDataDictionary<T> {\n    return Object.keys(this.nodes)\n      .filter((nodeId) => all || this.nodes[nodeId].isResult)\n      .reduce((results: ResultDataDictionary<T>, nodeId) => {\n        const node = this.nodes[nodeId];\n        if (node.result !== undefined) {\n          results[nodeId] = node.result as T;\n        }\n        return results;\n      }, {});\n  }\n\n  // Public API\n  public errors(): Record<string, Error> {\n    return Object.keys(this.nodes).reduce((errors: Record<string, Error>, nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        if (node.error !== undefined) {\n          errors[nodeId] = node.error;\n        }\n      }\n      return errors;\n    }, {});\n  }\n\n  private pushReadyNodesIntoQueue() {\n    // Nodes without pending data should run immediately.\n    Object.keys(this.nodes).forEach((nodeId) => {\n      const node = this.nodes[nodeId];\n      if (node.isComputedNode) {\n        this.pushQueueIfReady(node);\n      }\n    });\n  }\n\n  private pushQueueIfReady(node: ComputedNode) {\n    if (node.isReadyNode()) {\n      this.pushQueue(node);\n    }\n  }\n\n  public pushQueueIfReadyAndRunning(node: ComputedNode) {\n    if (this.isRunning()) {\n      this.pushQueueIfReady(node);\n    }\n  }\n\n  // for computed\n  public pushQueue(node: ComputedNode) {\n    node.beforeAddTask();\n\n    this.taskManager.addTask(node, this.graphId, (_node) => {\n      assert(node.nodeId === _node.nodeId, \"GraphAI.pushQueue node mismatch\");\n      node.execute();\n    });\n  }\n\n  // Public API\n  public async run<T = DefaultResultData>(all: boolean = false): Promise<ResultDataDictionary<T>> {\n    if (\n      Object.values(this.nodes)\n        .filter((node) => node.isStaticNode)\n        .some((node) => node.result === undefined && node.update === undefined)\n    ) {\n      throw new Error(\"Static node must have value. Set value or injectValue or set update\");\n    }\n    if (this.isRunning()) {\n      throw new Error(\"This GraphAI instance is already running\");\n    }\n\n    this.pushReadyNodesIntoQueue();\n\n    if (!this.isRunning()) {\n      console.warn(\"-- nothing to execute\");\n      return {};\n    }\n\n    return new Promise((resolve, reject) => {\n      this.onComplete = (isAbort: boolean = false) => {\n        const errors = this.errors();\n        const nodeIds = Object.keys(errors);\n        if (nodeIds.length > 0 || isAbort) {\n          reject(errors[nodeIds[0]]);\n        } else {\n          resolve(this.results(all));\n        }\n      };\n    });\n  }\n\n  public abort() {\n    if (this.isRunning()) {\n      this.resetPending();\n    }\n    // For an agent like an event agent, where an external promise remains unresolved,\n    // aborting and then retrying can cause nodes or the graph to execute again.\n    // To prevent this, the transactionId is updated to ensure the retry fails.\n    Object.values(this.nodes).forEach((node) => node.isComputedNode && (node.transactionId = undefined));\n    this.onComplete(this.isRunning());\n  }\n  public resetPending() {\n    Object.values(this.nodes).map((node) => {\n      if (node.isComputedNode) {\n        node.resetPending();\n      }\n    });\n  }\n\n  // Public only for testing\n  public isRunning() {\n    return this.taskManager.isRunning(this.graphId);\n  }\n\n  // callback from execute\n  public onExecutionComplete(node: ComputedNode) {\n    this.taskManager.onComplete(node);\n    if (this.isRunning() || this.processLoopIfNecessary()) {\n      return; // continue running\n    }\n    this.onComplete(false); // Nothing to run. Finish it.\n  }\n\n  // Must be called only from onExecutionComplete righ after removeRunning\n  // Check if there is any running computed nodes.\n  // In case of no running computed note, start the another iteration if ncessary (loop)\n  private processLoopIfNecessary() {\n    this.repeatCount++;\n    const loop = this.loop;\n    if (!loop) {\n      return false;\n    }\n\n    // We need to update static nodes, before checking the condition\n    const previousResults = this.results(true); // results from previous loop\n    this.updateStaticNodes(previousResults);\n\n    if (loop.count === undefined || this.repeatCount < loop.count) {\n      if (loop.while) {\n        const source = parseNodeName(loop.while);\n        const value = this.getValueFromResults(source, this.results(true));\n        // NOTE: We treat an empty array as false.\n        if (!isLogicallyTrue(value)) {\n          return false; // while condition is not met\n        }\n      }\n      this.initializeGraphAI();\n      this.updateStaticNodes(previousResults, true);\n      this.pushReadyNodesIntoQueue();\n      return true; // Indicating that we are going to continue.\n    }\n    return false;\n  }\n\n  public initializeGraphAI() {\n    if (this.isRunning()) {\n      throw new Error(\"This GraphAI instance is running\");\n    }\n    this.nodes = this.createNodes(this.graphData);\n    this.initializeStaticNodes();\n  }\n  public setPreviousResults(previousResults: ResultDataDictionary<DefaultResultData>) {\n    this.updateStaticNodes(previousResults);\n  }\n  public setLoopLog(log: TransactionLog) {\n    log.isLoop = !!this.loop;\n    log.repeatCount = this.repeatCount;\n  }\n\n  public appendLog(log: TransactionLog) {\n    this.logs.push(log);\n    this.onLogCallback(log, false);\n    this.callbacks.forEach((callback) => callback(log, false));\n  }\n\n  public updateLog(log: TransactionLog) {\n    this.onLogCallback(log, true);\n    this.callbacks.forEach((callback) => callback(log, false));\n  }\n\n  public registerCallback(callback: CallbackFunction) {\n    this.callbacks.push(callback);\n  }\n\n  public clearCallbacks() {\n    this.callbacks = [];\n  }\n\n  // Public API\n  public transactionLogs() {\n    return this.logs;\n  }\n\n  // Public API\n  public injectValue(nodeId: string, value: ResultData, injectFrom?: string): void {\n    const node = this.nodes[nodeId];\n    if (node && node.isStaticNode) {\n      node.injectValue(value, injectFrom);\n    } else {\n      throw new Error(`injectValue with Invalid nodeId, ${nodeId}`);\n    }\n  }\n\n  public resultsOf(inputs?: Record<string, any>, anyInput: boolean = false) {\n    const results = resultsOf(inputs ?? [], this.nodes, this.propFunctions);\n    if (anyInput) {\n      return cleanResult(results);\n    }\n    return results;\n  }\n  public resultOf(source: DataSource) {\n    return resultOf(source, this.nodes, this.propFunctions);\n  }\n}\n"],"names":["NodeState","parseNodeName","inputNodeId","isSelfNode","nodeId","propIds","split","slice","value","regex","match","parts","length","assert","condition","message","isWarn","Error","console","warn","isObject","x","isNull","data","strIntentionalError","defaultAgentInfo","name","samples","inputs","params","result","description","category","author","repository","license","objectToKeyArray","innerData","ret","Object","keys","forEach","key","push","tmp","debugResultKey","agentId","debugResultKeyInner","map","objectKeys","join","Array","isArray","from","reduce","index","String","isLogicallyTrue","defaultTestContext","debugInfo","retry","verbose","state","Executing","subGraphs","Map","filterParams","agents","log","isNamedInputs","namedInputs","isComputedNodeData","node","isStaticNodeData","inputs2dataSources","inp","flat","values","input","templateMatch","matchAll","m","dataSourceNodeIds","sources","filter","source","TransactionLog","constructor","this","Waiting","initForComputedNode","graph","getAgentId","appendLog","onInjected","injectFrom","isUpdating","endTime","Date","now","setLoopLog","updateLog","onComplete","localLog","resultKeys","beforeExecute","transactionId","retryCount","undefined","startTime","dataSources","inputsData","beforeAddTask","onError","errorMessage","onSkipped","propFunctionRegex","propFunctions","propId","JSON","stringify","matchJoin","parse","Number","isNaN","trim","toLowerCase","toUpperCase","sliceMatch","splitMatch","isFinite","innerGetDataFromSource","propFunction","parseInt","getNestedData","error","getDataFromSource","resultsOfInner","nodes","resultsOf","results","replaceAll","resultOf","cleanResultInner","Node","waitlist","Set","asString","onSetResult","waitingNodeId","waitingNode","isComputedNode","removePending","pushQueueIfReadyAndRunning","afterConsoleLog","after","self","ComputedNode","graphId","super","isSkip","isStaticNode","passThrough","retryLimit","timeout","isResult","priority","includes","agent","agentFunction","async","anyInput","output","pendings","nestedGraph","addPendingNode","graphLoader","if","ifSource","unless","unlessSource","defaultValue","getConfig","hasGraphData","config","add","updateState","resetPending","clear","Abort","abort","isReadyNode","size","Skipped","execute","onExecutionComplete","checkDataAvailability","some","Queued","delete","isCurrentTransaction","executeTimeout","TimedOut","shouldApplyAgentFilter","agentFilter","agentIds","nodeIds","agentFilterHandler","context","next","innerContext","agentFilters","afterExecute","previousResults","hasNestedGraph","Boolean","getAgentFunctionInfo","prepareExecute","setTimeout","getContext","taskManager","prepareForNesting","forNestedGraph","graphData","version","agentFunctionInfoDictionary","graphOptions","bypassAgentIds","onLogCallback","callbacks","beforeConsoleLog","restoreAfterNesting","errorProcess","Completed","getResult","Failed","getDebugInfo","inputSchema","cacheType","r","before","StaticNode","update","injectValue","Injected","consoleLog","graphDataAttributeKeys","computedNodeAttributeKeys","staticNodeAttributeKeys","ValidationError","setPrototypeOf","prototype","validateGraphData","graphNodesValidator","loop","count","while","concurrency","isInteger","graphDataValidator","computedNodeIds","staticNodeIds","graphAgentIds","nodeData","nodeValidator","computedNodeValidator","has","agentValidator","computedNodeId","dataSourceValidator","sourceType","sourceNodeIds","sourceNodeId","staticNodeId","updateNodeId","cycle","possibles","possobleNodeId","running","pendingNodeId","runningQueue","relationValidator","TaskManager","taskQueue","runningNodes","dequeueTaskIfPossible","task","shift","callback","addTask","splice","isRunning","getStatus","queuedNodes","queue","graphDataLatestVersion","createNodes","_nodes","pending","getValueFromResults","initializeStaticNodes","enableConsoleLog","updateStaticNodes","options","logs","__log","__isUpdate","repeatCount","toString","Math","random","substr","__isAbort","agentInfo","validateAgent","all","errors","pushReadyNodesIntoQueue","pushQueueIfReady","pushQueue","_node","run","Promise","resolve","reject","isAbort","processLoopIfNecessary","initializeGraphAI","setPreviousResults","isLoop","registerCallback","clearCallbacks","transactionLogs","cleanResult","mock","milliseconds"],"mappings":"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"}